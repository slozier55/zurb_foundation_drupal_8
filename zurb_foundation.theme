<?php

/**
 * Load template files
 */
require_once('inc/elements.inc');
require_once('inc/form.inc');
require_once('inc/menu.inc');
require_once('inc/theme.inc');

/**
 * Implements hook_html_head_alter().
 */
function zurb_foundation_html_head_alter(&$head_elements) {
  // Optimize mobile viewport.
  $head_elements['mobile_viewport'] = array(
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => array(
      'name' => 'viewport',
      'content' => 'width=device-width',
    ),
  );

  // Force IE to use Chrome Frame if installed.
  $head_elements['chrome_frame'] = array(
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => array(
      'content' => 'ie=edge, chrome=1',
      'http-equiv' => 'x-ua-compatible',
    ),
  );

  // Remove image toolbar in IE.
  $head_elements['ie_image_toolbar'] = array(
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => array(
      'http-equiv' => 'ImageToolbar',
      'content' => 'false',
    ),
  );
}

/**
 * Implements hook_preprocess_breadcrumb().
 *
 * Adds the "title" variable so that the current page can be added as a breadcrumb.
 */
function zurb_foundation_preprocess_breadcrumb(&$variables) {
  $request = \Drupal::request();
  $route_match = \Drupal::routeMatch();
  $title = \Drupal::service('title_resolver')->getTitle($request, $route_match->getRouteObject());

  $variables['title'] = $title;
}

/**
 * Implements hook_preprocess_block()
 */
function zurb_foundation_preprocess_block(&$variables) {
  // Convenience variable for block headers.
  $title_class = &$variables['title_attributes']['class'];

  // Generic block header class.
  $title_class[] = 'block-title';

  $region = isset($variables['configuration']['region']) ? $variables['configuration']['region'] : '';

  if ($region == 'header') {
    $title_class[] = 'visually-hidden';
  }

  // Add a unique class for each block for styling.
  if (isset($variables['attributes']['id'])) {
    $variables['attributes']['class'][] = $variables['attributes']['id'];
  }

  switch ($region) {
    // Add a striping class
    case 'sidebar_first':
    case 'sidebar_second':
      #$variables['attributes']['class'][] = 'block-' . $variables['zebra'];
    break;

    case 'header':
      $variables['attributes']['class'][] = 'header';
    break;

    default;
  }
}

/**
 * Implements template_preprocess_field().
 */
function zurb_foundation_preprocess_field(&$variables) {
  if (!isset($variables['title_attributes']['class'])) {
    $variables['title_attributes']['class'] = array();
  }
  if (!isset($variables['content_attributes']['class'])) {
    $variables['content_attributes']['class'] = array();
  }
  $variables['title_attributes']['class'][] = 'field-label';

  // Convenience variables
  $name = $variables['element']['#field_name'];
  $bundle = $variables['element']['#bundle'];
  $mode = $variables['element']['#view_mode'];
  $classes = &$variables['classes_array'];
  $title_classes = &$variables['title_attributes']['class'];
  $content_classes = &$variables['content_attributes']['class'];
  $item_classes = array();

  // Global field classes
  $classes[] = 'field-wrapper';
  $content_classes[] = 'field-items';
  $item_classes[] = 'field-item';

  // Add specific classes to targeted fields
  if(isset($field)) {
    switch ($mode) {
      // All teasers
      case 'teaser':
        switch ($field) {
          // Teaser read more links
          case 'node_link':
            $item_classes[] = 'more-link';
            break;
          // Teaser descriptions
          case 'body':
          case 'field_description':
            $item_classes[] = 'description';
            break;
        }
      break;
    }
  }

  // Apply odd or even classes along with our custom classes to each item
  foreach ($variables['items'] as $delta => $item) {
    $item_classes[] = $delta % 2 ? 'odd' : 'even';
    $variables['item_attributes'][$delta]['class'] = $item_classes;
  }

  // Add class to a specific fields across content types.
  switch ($variables['element']['#field_name']) {
    case 'body':
      $variables['classes_array'] = array('body');
      break;

    case 'field_summary':
      $variables['classes_array'][] = 'text-teaser';
      break;

    case 'field_link':
    case 'field_date':
      // Replace classes entirely, instead of adding extra.
      $variables['classes_array'] = array('text-content');
      break;

    case 'field_image':
      // Replace classes entirely, instead of adding extra.
      $variables['classes_array'] = array('image');
      break;

    default:
      break;
  }
  // Add classes to body based on content type and view mode.
  if ($variables['element']['#field_name'] == 'body') {

    // Add classes to Foobar content type.
    if ($variables['element']['#bundle'] == 'foobar') {
      $variables['classes_array'][] = 'text-secondary';
    }

    // Add classes to other content types with view mode 'teaser';
    elseif ($variables['element']['#view_mode'] == 'teaser') {
      $variables['classes_array'][] = 'text-secondary';
    }

    // The rest is text-content.
    else {
      $variables['classes_array'][] = 'field';
    }
  }
}

/**
 * Implements template_preprocess_html().
 *
 * Adds additional classes
 */
function zurb_foundation_preprocess_html(&$variables) {
  global $language;
  $site_language =            isset($language) ? $language->language : 'en';
  $site_language_direction =  isset($language) ? $language->dir : 'ltr';

  // Clean up the lang attributes
  $variables['html_attributes'] = 'lang="' . $site_language . '" dir="' . $site_language_direction . '"';

  // Add language body class.
  if (function_exists('locale')) {
    $variables['classes_array'][] = 'lang-' . $variables['language']->language;
  }

  #$variables['skip_link'] = \Drupal::l('Skip to main content', '', array('fragment' => 'main-content', 'attributes' => array('class' => array('visually-hidden', 'focusable'))));

  // Classes for body element. Allows advanced theming based on context
  if (isset($variables['is_front']) && !$variables['is_front']) {
    // Add unique class for each page.
    $path = \Drupal::request()->getRequestUri();
    // Add unique class for each website section.
    list($section, ) = explode('/', $path, 2);
    $arg = explode('/', $path);
    if ($arg[0] == 'node' && isset($arg[1])) {
      if ($arg[1] == 'add') {
        $section = 'node-add';
      }
      elseif (isset($arg[2]) && is_numeric($arg[1]) && ($arg[2] == 'edit' || $arg[2] == 'delete')) {
        $section = 'node-' . $arg[2];
      }
    }
    $variables['classes_array'][] = \Drupal\Component\Utility\Html::getClass('section-' . $section);
  }

  // @todo: is this needed? if so, menu_get_item() has been removed and needs to be reworked
  // Store the menu item since it has some useful information.
//  $variables['menu_item'] = menu_get_item();
//  if ($variables['menu_item']) {
//    switch ($variables['menu_item']['page_callback']) {
//      case 'views_page':
//        $variables['classes_array'][] = 'views-page';
//        break;
//      case 'page_manager_page_execute':
//      case 'page_manager_node_view':
//      case 'page_manager_contact_site':
//        $variables['classes_array'][] = 'panels-page';
//        break;
//    }
//  }
}

/**
 * Implements template_preprocess_node
 *
 * Add template suggestions and classes
 */
function zurb_foundation_preprocess_node(&$variables) {
  // Add node--node_type--view_mode.html.twig suggestions
  $variables['theme_hook_suggestions'][] = 'node__' . $variables['elements']['#node']->bundle() . '__' . $variables['view_mode'];

  // Add node--view_mode.html.twig suggestions
  $variables['theme_hook_suggestions'][] = 'node__' . $variables['view_mode'];

  // Add a class for the view mode.
  if (!$variables['teaser']) {
    $variables['content_attributes'][] = 'view-mode-' . $variables['view_mode'];
  }

  $variables['title_attributes']['class'][] = 'node-title';
}

/**
 * Implements template_preprocess_page
 *
 * Add convenience variables and template suggestions
 */
function zurb_foundation_preprocess_page(&$variables) {
  $path_to_theme = drupal_get_path('theme', 'zurb_foundation');

  // @todo: is this going to be used in D8/F5?
//  if (theme_get_setting('use_respondjs', 'zurb_foundation')) {
//    $script = array(
//      '#tag' => 'script',
//      '#attributes' => array(
//        'src' => '/' . $path_to_theme . '/js/vendor/respond.min.js',
//        'type' => 'text/javascript',
//      ),
//      '#prefix' => '<!--[if lte IE 8]>',
//      '#suffix' => '</script><![endif]-->',
//    );
//
//    drupal_add_html_head($script, 'zurb_respondjs');
//  }

  // initialize Foundation library last
  $variables['page']['#attached']['js'][] = array(
    'type' => 'inline',
    'scope' => 'footer',
    'weight' => 9999,
    'data' => '(function ($) { $(document).foundation(); })(jQuery);'
  );

  // Add page--node_type.html.twig suggestions
  if (!empty($variables['node'])) {
    $variables['theme_hook_suggestions'][] = 'page__' . $variables['node']->bundle();
  }

  $variables['logo_img'] = '';
  if (!empty($variables['logo'])) {
    $elements = array('#theme' => 'image',
      '#attributes' => array(
        'src'  => $variables['logo'],
        'alt'   => strip_tags($variables['site_name']) . ' ' . t('logo'),
        'title' => strip_tags($variables['site_name']) . ' ' . t('Home'),
        'class' => array('logo'),
      )
    );

    $variables['logo_img'] = $elements;
  }

  $title = strip_tags($variables['site_name']) . ' ' . t('Home');
  $url = \Drupal\Core\Url::fromRoute('<front>');
  $url->setOption('attributes', array('title' => $title));

  $variables['linked_logo']  = '';
  if (!empty($variables['logo_img'])) {
    $variables['linked_logo'] = \Drupal::l($variables['logo_img'], $url);
  }

  $variables['linked_site_name'] = '';
  if (!empty($variables['site_name'])) {
    $variables['linked_site_name'] = \Drupal::l($variables['site_name'], $url);
  }

  // Convenience variables
  $left = $variables['page']['sidebar_first'];
  $right = $variables['page']['sidebar_second'];

  // Dynamic sidebars
  if (!empty($left) && !empty($right)) {
    $variables['main_grid'] = 'large-6 push-3';
    $variables['sidebar_first_grid'] = 'large-3 pull-6';
    $variables['sidebar_sec_grid'] = 'large-3';
  } elseif (empty($left) && !empty($right)) {
    $variables['main_grid'] = 'large-9';
    $variables['sidebar_first_grid'] = '';
    $variables['sidebar_sec_grid'] = 'large-3';
  } elseif (!empty($left) && empty($right)) {
    $variables['main_grid'] = 'large-9 push-3';
    $variables['sidebar_first_grid'] = 'large-3 pull-9';
    $variables['sidebar_sec_grid'] = '';
  } else {
    $variables['main_grid'] = 'large-12';
    $variables['sidebar_first_grid'] = '';
    $variables['sidebar_sec_grid'] = '';
  }
}

/**
 * Implements template_preprocess_views_view().
 */
function zurb_foundation_preprocess_views_view(&$variables) {}

/**
 * Implements hook_css_alter().
 * @param $css
 */
function zurb_foundation_css_alter(&$css) {
  // Remove base theme CSS.
  if(theme_get_setting('disable_base_css', 'zurb_foundation') == TRUE) {
    $theme_path = drupal_get_path('theme', 'zurb_foundation');

    foreach($css as $path => $values) {
      if(strpos((string) $values['data'], $theme_path) === 0) {
        unset($css[$path]);
      }
    }
  }
}

/**
 * Implements hook_js_alter().
 * @param $js
 */
function zurb_foundation_js_alter(&$js) {
  // Remove base theme JS.
  if(theme_get_setting('disable_base_js', 'zurb_foundation') == TRUE) {
    $theme_path = drupal_get_path('theme', 'zurb_foundation');

    foreach($js as $path => $values) {
      if(strpos((string) $values['data'], $theme_path) === 0) {
        unset($js[$path]);
      }
    }
  }
}
